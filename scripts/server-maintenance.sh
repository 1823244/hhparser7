#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ hhparser5
# –í–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—á–∏—Å—Ç–∫—É –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
APP_DIR="/opt/hhparser"
LOG_DIR="/var/log/hhparser"
BACKUP_DIR="${APP_DIR}/backups"

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

header() {
    echo -e "${PURPLE}==== $1 ====${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    cat << EOF
–°–∫—Ä–∏–ø—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ hhparser5

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]

–ö–æ–º–∞–Ω–¥—ã:
  status      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  logs        - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  monitor     - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  backup      - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  cleanup     - –û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  update      - –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã –∏ Docker –æ–±—Ä–∞–∑—ã
  restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
  health      - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
  disk        - –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
  network     - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  $0 status
  $0 monitor
  $0 backup
  $0 cleanup

EOF
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    header "–°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í"
    
    echo "üê≥ Docker:"
    docker --version
    
    echo ""
    echo "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    if [ -f "${APP_DIR}/docker-compose.prod.yml" ]; then
        cd "${APP_DIR}"
        docker-compose -f docker-compose.prod.yml ps
    else
        warn "docker-compose.prod.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo ""
    echo "üî• Systemd —Å–µ—Ä–≤–∏—Å—ã:"
    systemctl is-active docker || true
    systemctl is-active hhparser || true
    systemctl is-active fail2ban || true
    
    echo ""
    echo "üåê –°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
    ss -tulpn | grep -E ":(80|443|9595|5432|9090|3000)" || true
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    header "–õ–û–ì–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"
    
    if [ -f "${APP_DIR}/docker-compose.prod.yml" ]; then
        cd "${APP_DIR}"
        echo "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
        docker-compose -f docker-compose.prod.yml logs --tail=50 --timestamps
    else
        warn "docker-compose.prod.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo ""
    echo "üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏:"
    journalctl -u docker --lines=20 --no-pager
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_system() {
    header "–ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–°–£–†–°–û–í"
    
    echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:"
    free -h
    
    echo ""
    echo "üíΩ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:"
    df -h
    
    echo ""
    echo "‚ö° –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:"
    uptime
    
    echo ""
    echo "üê≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}"
    
    echo ""
    echo "üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã:"
    ps aux --sort=-%cpu | head -10
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
create_backup() {
    header "–°–û–ó–î–ê–ù–ò–ï –ë–≠–ö–ê–ü–ê"
    
    if [ -f "${APP_DIR}/backup-db.sh" ]; then
        cd "${APP_DIR}"
        ./backup-db.sh
        
        echo ""
        echo "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
        ls -lah "${BACKUP_DIR}/"*.sql.gz 2>/dev/null | tail -10 || warn "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        error "–°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${APP_DIR}/backup-db.sh"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã
cleanup_system() {
    header "–û–ß–ò–°–¢–ö–ê –°–ò–°–¢–ï–ú–´"
    
    log "–û—á–∏—â–∞–µ–º Docker..."
    docker system prune -f
    docker volume prune -f
    docker image prune -a -f
    
    log "–û—á–∏—â–∞–µ–º –ª–æ–≥–∏..."
    journalctl --vacuum-time=7d
    
    log "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)..."
    find "${BACKUP_DIR}" -name "*.sql.gz" -mtime +30 -delete 2>/dev/null || true
    
    log "–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
    rm -rf /tmp/*hhparser* 2>/dev/null || true
    
    log "–û—á–∏—â–∞–µ–º –∫—ç—à APT..."
    if [[ $EUID -eq 0 ]]; then
        apt autoremove -y
        apt autoclean
    else
        warn "–î–ª—è –æ—á–∏—Å—Ç–∫–∏ APT –∫—ç—à–∞ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ root"
    fi
    
    log "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
update_system() {
    header "–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´"
    
    if [[ $EUID -ne 0 ]]; then
        error "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ root"
    fi
    
    log "–û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã —Å–∏—Å—Ç–µ–º—ã..."
    apt update && apt upgrade -y
    
    log "–û–±–Ω–æ–≤–ª—è–µ–º Docker –æ–±—Ä–∞–∑—ã..."
    if [ -f "${APP_DIR}/docker-compose.prod.yml" ]; then
        cd "${APP_DIR}"
        docker-compose -f docker-compose.prod.yml pull
    fi
    
    log "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    warn "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: $0 restart"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    header "–ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í"
    
    if [ -f "${APP_DIR}/docker-compose.prod.yml" ]; then
        cd "${APP_DIR}"
        
        log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker-compose -f docker-compose.prod.yml down
        
        log "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker-compose -f docker-compose.prod.yml up -d
        
        sleep 10
        
        log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
        docker-compose -f docker-compose.prod.yml ps
    else
        error "docker-compose.prod.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    header "–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´"
    
    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if systemctl is-active --quiet docker; then
        echo "‚úÖ Docker: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "‚ùå Docker: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if curl -f -s http://localhost:9595/actuator/health > /dev/null; then
        echo "‚úÖ HHParser App: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "‚ùå HHParser App: –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if docker exec hhparser-postgres pg_isready -U postgres > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "‚ùå PostgreSQL: –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    echo ""
    echo "üíΩ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ..."
    df -h | awk '$5 ~ /^[8-9][0-9]%|^100%/ {print "‚ö†Ô∏è  " $0}'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    echo ""
    echo "üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏..."
    free -h | awk 'NR==2{printf "–ü–∞–º—è—Ç—å: %s/%s (%.2f%%)\n", $3,$2,$3*100/$2 }'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
    echo ""
    echo "üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)..."
    journalctl --since "24 hours ago" --priority=err --no-pager | wc -l | awk '{print "–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: " $1}'
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–∫–∞
analyze_disk() {
    header "–ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –î–ò–°–ö–ê"
    
    echo "üíΩ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    df -h
    
    echo ""
    echo "üìÅ –¢–æ–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É:"
    du -h --max-depth=1 / 2>/dev/null | sort -hr | head -10
    
    echo ""
    echo "üê≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker:"
    docker system df
    
    echo ""
    echo "üìã –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤:"
    find /var/log -type f -size +100M -exec ls -lh {} \; 2>/dev/null | head -10
}

# –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
network_diagnostics() {
    header "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–¢–ò"
    
    echo "üåê –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
    ip addr show
    
    echo ""
    echo "üîó –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:"
    ip route show
    
    echo ""
    echo "üì° –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:"
    ss -tulpn | grep LISTEN
    
    echo ""
    echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
    ping -c 3 8.8.8.8 > /dev/null && echo "‚úÖ DNS Google: OK" || echo "‚ùå DNS Google: FAIL"
    ping -c 3 google.com > /dev/null && echo "‚úÖ Google.com: OK" || echo "‚ùå Google.com: FAIL"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    "status")
        show_status
        ;;
    "logs")
        show_logs
        ;;
    "monitor")
        monitor_system
        ;;
    "backup")
        create_backup
        ;;
    "cleanup")
        cleanup_system
        ;;
    "update")
        update_system
        ;;
    "restart")
        restart_services
        ;;
    "health")
        health_check
        ;;
    "disk")
        analyze_disk
        ;;
    "network")
        network_diagnostics
        ;;
    "help"|*)
        show_help
        ;;
esac
